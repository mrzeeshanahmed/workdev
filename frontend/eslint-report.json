[{"filePath":"E:\\workdev\\frontend\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\admin\\VettingQueue.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\auth\\TwoFactorSetup.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\auth\\TwoFactorSetup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\messages\\components\\MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\messages\\messages.integration.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rows' is defined but never used. Allowed unused args must match /^_/u.","line":67,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\r\nimport { describe, it, expect, vi } from 'vitest'\r\nimport { render, screen, fireEvent, waitFor, cleanup } from '@testing-library/react'\r\nimport { afterEach } from 'vitest'\r\n\r\nafterEach(() => cleanup())\r\n\r\n// Ensure module-level supabase factory in useMessages picks up a non-empty URL/key\r\nprocess.env.VITE_SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'http://test'\r\nprocess.env.VITE_SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY || 'anon'\r\n\r\n// Mock the supabase client used in the hook to simulate delayed server ack\r\nvi.mock('@supabase/supabase-js', () => {\r\n  return {\r\n    createClient: () => ({\r\n      from: () => ({\r\n        select: () => ({\r\n          eq: () => ({\r\n            order: async () => ({ data: [] })\r\n          })\r\n        }),\r\n        insert: (rows: any[]) => ({\r\n          select: () => ({\r\n            single: async () => {\r\n              // simulate server delay\r\n              await new Promise((r) => setTimeout(r, 50))\r\n              return { data: { ...rows[0], id: 'real-1', created_at: new Date().toISOString() } }\r\n            }\r\n          })\r\n        })\r\n      }),\r\n      channel: () => ({ on: () => ({ subscribe: () => null }), subscribe: () => null, remove: () => null }),\r\n      removeChannel: () => null\r\n    })\r\n  }\r\n})\r\n\r\nimport { MessageList } from './components/MessageList'\r\n\r\ndescribe('Messages optimistic UI (frontend-local)', () => {\r\n  it('shows optimistic message immediately when sending', async () => {\r\n    render(<MessageList conversationId=\"conv-1\" currentUserId=\"user-1\" />)\r\n\r\n    const input = screen.getByTestId('message-input') as HTMLInputElement\r\n    const btn = screen.getByTestId('send-btn') as HTMLButtonElement\r\n\r\n    fireEvent.change(input, { target: { value: 'Hello' } })\r\n    fireEvent.click(btn)\r\n\r\n    // optimistic entry should appear immediately\r\n    expect(screen.getByText('Hello')).toBeTruthy()\r\n  })\r\n\r\n  it('rolls back optimistic message when server rejects insert', async () => {\r\n    // Clear module cache so our fresh mock is used when importing the component\r\n    vi.resetModules()\r\n    // prepare env\r\n    process.env.VITE_SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'http://test'\r\n    process.env.VITE_SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY || 'anon'\r\n\r\n    // Mock supabase to return an error on insert\r\n    vi.mock('@supabase/supabase-js', () => {\r\n      return {\r\n        createClient: () => ({\r\n          from: () => ({\r\n            select: () => ({ eq: () => ({ order: async () => ({ data: [] }) }) }),\r\n            insert: (rows: any[]) => ({\r\n              select: () => ({ single: async () => ({ data: null, error: { message: 'boom' } }) })\r\n            })\r\n          }),\r\n          channel: () => ({ on: () => ({ subscribe: () => null }), subscribe: () => null, remove: () => null }),\r\n          removeChannel: () => null\r\n        })\r\n      }\r\n    })\r\n\r\n    // Dynamically import the component after mock and env are set so module-level client uses mock\r\n    const { MessageList: DynamicMessageList } = await import('./components/MessageList')\r\n    render(React.createElement(DynamicMessageList as any, { conversationId: 'conv-err', currentUserId: 'user-1' }))\r\n\r\n    const input = screen.getByTestId('message-input') as HTMLInputElement\r\n    const btn = screen.getByTestId('send-btn') as HTMLButtonElement\r\n\r\n    fireEvent.change(input, { target: { value: 'FailMe' } })\r\n    fireEvent.click(btn)\r\n\r\n    // optimistic entry should appear immediately\r\n    expect(screen.getByText('FailMe')).toBeTruthy()\r\n\r\n    // after server error, optimistic message should be removed\r\n    await waitFor(() => expect(screen.queryByText('FailMe')).toBeNull(), { timeout: 1000 })\r\n  })\r\n})\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\messages\\useMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\onboarding\\OnboardingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\profile\\ProfilePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\reviews\\ReputationDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\reviews\\ReviewForm.tsx","messages":[{"ruleId":"no-extra-semi","severity":1,"message":"Unnecessary semicolon.","line":21,"column":7,"nodeType":"EmptyStatement","messageId":"unexpected","endLine":21,"endColumn":8,"fix":{"range":[669,680],"text":"{\r\n      ("}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useState, useEffect } from 'react'\r\nimport { createReview } from '../../services/reviews.service'\r\nimport supabase from '../../lib/supabaseClient'\r\n\r\ntype Props = {\r\n  projectId: string\r\n  reviewerId?: string\r\n  onSubmitted?: () => void\r\n}\r\n\r\nexport default function ReviewForm({ projectId, reviewerId, onSubmitted }: Props) {\r\n  const [score, setScore] = useState(5)\r\n  const [comment, setComment] = useState('')\r\n  const [saving, setSaving] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const [localReviewer, setLocalReviewer] = useState<string | undefined>(reviewerId)\r\n\r\n  useEffect(() => {\r\n    if (!reviewerId) {\r\n      ;(async () => {\r\n        try {\r\n          const s = await supabase.auth.getSession()\r\n          const uid = (s as any).data?.session?.user?.id\r\n          if (uid) setLocalReviewer(uid)\r\n        } catch (e) {\r\n          // noop\r\n        }\r\n      })()\r\n    }\r\n  }, [reviewerId])\r\n\r\n  async function submit(e: React.FormEvent) {\r\n    e.preventDefault()\r\n    setSaving(true)\r\n    setError(null)\r\n    try {\r\n      const rid = localReviewer || reviewerId\r\n      if (!rid) throw new Error('not-authenticated')\r\n      await createReview({ project_id: projectId, reviewer_id: rid, reviewee_id: undefined, score, comment })\r\n      setComment('')\r\n      if (typeof onSubmitted === 'function') onSubmitted()\r\n    } catch (err: any) {\r\n      setError(err?.message || 'Failed')\r\n    } finally {\r\n      setSaving(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submit}>\r\n      <div>\r\n        <label htmlFor=\"score\">Score</label>\r\n        <input id=\"score\" type=\"number\" min={1} max={5} value={score} onChange={(e) => setScore(Number(e.target.value))} />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"comment\">Comment</label>\r\n        <textarea id=\"comment\" value={comment} onChange={(e) => setComment(e.target.value)} />\r\n      </div>\r\n      {error && <div role=\"alert\">{error}</div>}\r\n      <button type=\"submit\" disabled={saving}>{saving ? 'Saving...' : 'Submit Review'}</button>\r\n    </form>\r\n  )\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\reviews\\ReviewsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\features\\reviews\\reviews.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\lib\\supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\services\\__tests__\\reviews.service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\services\\messages.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\services\\profiles.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\services\\projects.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"E:\\workdev\\frontend\\src\\services\\reviews.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]